--[[

	Author: MadDog (steam id md-maddog)
	Contact: http://www.facepunch.com/members/145240-MadDog986

	TODO:
		- Add more events to planets
			- ideas: terraform adds plants?

	NOTE: DO NOT EDIT THIS FILE TO ADD EVENTS. Create your own file to add events.
]]

local EVENTS = {
	Name = "Events",
	Author = "MadDog",
	Version = 110215,

	--settings
	CVars = {
		"sb_events_enable" = { server = true, text = "Enable Events System", default = true },
	}
}

local events = {}

function EVENTS:AddEvent( name, func )
	events[name] = {func = func}
end

function EVENTS:RemoveEvent( name )
	events[name] = nil
end

function EVENTS:Think()
	if ( !self:IsActive() ) then return end

	for _, event in pairs( events ) do
		if (event.NextUpdate and event.NextUpdate >= CurTime()) then continue end

		for _, planet in pairs( ents.FindByClass("sb_planet") ) do
			event.func( event, planet )
		end
	end
end

GM:AddPlugin( EVENTS )


EVENTS:AddSetting({
	name = "Gravity Update Interval (0 = Disable)",
	cvar = "sb_events_update_gravity",
	server = true,
	min = 0,
	max = 5,
	decimals = 1,
	default = 0.1
})

EVENTS:AddSetting({
	name = "Gravity Force Multipler",
	cvar = "sb_events_gravity_force",
	min = 0,
	max = 0.5,
	decimals = 6,
	default = 0.000009
})

EVENTS:AddEvent("sb_events_gravity", function( self, planet )
	if ( EVENTS:GetSetting("sb_events_update_gravity") == 0 ) then return end
	self.NextUpdate = CurTime() + EVENTS:GetSetting("sb_events_update_gravity")

	local enviro = GAMEMODE:GetPlugin( "Environments" )
	if ( !IsValid(enviro) or !enviro:IsActive() ) then return end

	local entities = planet:GetEntities()
	local radius = planet:GetSize()
	local gradius = planet:GetGravitySize()
	local ppos = planet:GetPos()

	--planet.Watch contains entities that are out of the planet and within its gravity pull (between radius and radius * 1.5)
	for _, ent in pairs( ents.FindInSphere(ppos, gradius) ) do
		if ( !IsValid(ent) or !enviro:HasEntity(ent) or planet:HasEntity(ent) ) then continue end

		local phys = ent:GetPhysicsObject()

		if ( !IsValid(phys) or !phys:IsMotionEnabled() ) then continue end

		phys:Wake()

		local epos = ent:GetPos()
		local distance = ppos:Distance(epos)
		local force = (gradius - (distance - radius)) * EVENTS:GetSetting("sb_events_gravity_force", 0.000009) --TODO: figure out a better calculation for gravity

		if ( ent:IsPlayer() ) then --apply player force
			ent:SetVelocity( (ppos - epos) * force * 0.1 )
		elseif ( ent:IsRagdoll() ) then
			for i = 0, ent:GetPhysicsObjectCount() do
				local subphys = ent:GetPhysicsObjectNum( i );

				if ( IsValid(phys) ) then
					subphys:ApplyForceCenter( (ppos - phys:GetPos()) * (phys:GetMass() * force) * 0.1 )
				end
			end
		else
			phys:ApplyForceCenter( (ppos - epos) * (phys:GetMass() * force) * 0.1 )
		end
	end
end)



--[[
	Snow/Rain Effects
]]

EVENTS:AddSetting({
	name = "Rain Effects Level",
	cvar = "sb_events_rainintense",
	min = 0,
	max = 3000,
	default = 1000
})

EVENTS:AddSetting({
	name = "Snow Effects Level",
	cvar = "sb_events_snowintense",
	min = 0,
	max = 3000,
	default = 1000
})

--weather events
EVENTS:AddEvent("weather", function( self, planet )
	if (planet:GetEnvironmentName() == "Coruscant") then
		--planet.raining = true
	elseif (planet:GetEnvironmentName() == "Kobol") then
		--planet.raining = (planet.environment.hightemperature < 273.150)
		--planet.snowing = (planet.environment.hightemperature > 273.150)
	end
end)

--[[
	Make it rain when we have lots of trees!
]]
EVENTS:AddSetting({
	name = "Rainforest: How many trees before it rains? (0 = Disable)",
	cvar = "sb_events_rainforest",
	server = true,
	min = 0,
	max = 100,
	default = 40
})

EVENTS:AddEvent("trees", function( self, planet )
	self.NextUpdate = CurTime() + 10

	planet:SetNWBool("Raining", ( #planet:GetEntitiesByClass( "sb_tree" ) > EVENTS:GetSetting("sb_events_rainforest") ) ) --rain forest always rain :)
end)

--[[
	UNSTABLE PLANETS
]]
EVENTS:AddSetting({
	name = "Unstable Planets Interval (0 = Disable)",
	cvar = "sb_events_update_unstable",
	server = true,
	min = 0,
	max = 500,
	default = 30
})

--makes the planet rumble randomly
EVENTS:AddEvent("unstable", function( self, planet )
	if ( EVENTS:GetSetting("sb_events_update_unstable") == 0 or planet:IsStable() ) then return end

	self.NextUpdate = CurTime() + EVENTS:GetSetting("sb_events_update_unstable")

	util.ScreenShake( planet:GetPos(), math.random(1, 8), 1, math.random(1, 3), planet:GetSize() )
	sound.Play(Sound("ambient/explosions/exp" .. math.random(1, 4) .. ".wav"), planet:GetPos(), 100, 100) --earth quake sounds
end)


if true then return end

--[[
	METEORS
]]
SETTINGS:Register({
	tab = "Framework Settings",
	name = "Meteors Interval (0 = Disable)",
	var = "update_meteors",
	type = "slider",
	level = "server",
	min = 0,
	max = 500,
	default = 15,
	admin = true
})

EVENTS:AddEvent("meteors", function( self, planet )
	if true then return end

	local time = 10--SETTINGS:GetServer("update_meteors", 15)

	if (time == 0) then return end --disable

	self.NextUpdate = CurTime() + time

	if (!planet.environment) then return end

	if (!planet.environment.unstable or planet.environment.unstable == 0) then return end --only want unstable planets
	if (table.Count(planet.entities) == 0) then return end --wait tell someone is on it to reduce lag, TODO: fix

	--get position of planet
	local Pos = planet:GetPos()
	local radius = planet:GetSize()
	local num = 10

	if math.random(1, 20) > 19 then num = 20 end
	if math.random(1, 50) > 49 then num = 40 end

	--cleanup incase some are left behind for some reason
	for _, meteor in pairs( ents.FindByClass("sb_meteor") ) do
	--	if !meteor:GetPlanet() or meteor:GetPlanet() == planet then meteor:Remove() end
	end

	local Spread = 8

	for i = 0, num, 1 do
		timer.Simple(math.random(0.5, time), function()
			if (!IsValid(planet)) then return end

			local Ang = math.random(0, 360)
			local Offset = planet:GetUp()*math.sin(Ang)*(radius/2) + planet:GetRight()*math.cos(Ang)*(radius/2)
			local pos = Pos + Offset
			--local Dir = (pos - planet:GetPos())
			local Dir = planet:GetForward() + planet:GetUp()*math.Rand(Spread,Spread*-1) + planet:GetRight()*math.Rand(Spread,Spread*-1)
			local Angles = Dir:Angle()

			local Met = ents.Create("sb_meteor")
			local x = math.random(pos.x, pos.x + (radius/2))
			local y = math.random(pos.y, pos.y + (radius/2))

			pos = Vector(x,y, Pos.z + radius)

			if (IsValid(Met)) then
				Met:SetPos( pos )
				Met:SetAngles( Angles )
				Met:Spawn()
				Met:Activate()
			end
		end)
	end
end)